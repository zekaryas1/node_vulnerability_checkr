#!/usr/bin/env node

const axios = require("axios").default;
const {readFile} = require("fs/promises");
const {resolve} = require("node:path");
const term = require('terminal-kit').terminal;

/**
 * read content of a file on file system
 * @param pathToFile path to package.json
 * @returns {Promise<*>} content of json file
 */
async function readPackageJson(pathToFile) {
    try {
        const filePath = resolve(pathToFile);
        return await readFile(filePath, {encoding: "utf8"});
    } catch (err) {
        term.red(err.message);
        process.exit();
    }
}

/**
 * given a content of node.js package.json file
 * @param fileContent
 * @returns {Promise<void>} combined dependencies of dev and main packages
 */
async function getAllDependencies(fileContent) {
    const jsonFileContent = JSON.parse(fileContent);
    let combinedDep = {};

    if (jsonFileContent.dependencies) {
        combinedDep = jsonFileContent.dependencies;
    }
    if (jsonFileContent.devDependencies) {
        combinedDep = {...combinedDep, ...jsonFileContent.devDependencies};
    }
    return combinedDep;
}

/**
 * coverts common package.json dep formats to ossindex vulnerability search format
 * i.e "axios": "^1.2.1" to axios@1.2.1
 * @param listOfDependencies
 * @returns {*[]}
 */
function toSSIndexFormat(listOfDependencies) {
    const ossFormat = [];
    for (const dependency in listOfDependencies) {
        let packageName = dependency;
        let version = listOfDependencies[packageName];

        if (packageName.startsWith("@")) {
            packageName = packageName.slice(1, dependency.length);
        }
        if (version.startsWith("^")) {
            version = version.slice(1);
        }
        ossFormat.push(`pkg:npm/${packageName}@${version}`);
    }
    return ossFormat;
}

/**
 * get response from ossindex.sonatype.org
 * @param listOfDependencies package.json dep in ossindex format
 * @returns {Promise<any>}
 */
async function makeRequest(listOfDependencies) {
    try {
        const remoteResponse = await axios.post(
            "https://ossindex.sonatype.org/api/v3/component-report",
            {
                coordinates: listOfDependencies,
            }
        );
        return remoteResponse.data;
    } catch (error) {
        term.red(error.message);
    }
}

/**
 * prints vulnerability response in table format
 * @param listOfVulnerabilities
 */
function prettyPrint(listOfVulnerabilities) {
    //Create a table
    const row = [[
        "Id",
        "Name",
        "Description",
        "Severity",
        "Detail link"
    ]];
    for (const vulnerability of listOfVulnerabilities.vulnerabilities) {
        row.push([
            vulnerability.id,
            vulnerability.displayName,
            vulnerability.description,
            vulnerability.cvssScore,
            vulnerability.reference
        ]);
    }

    term.table(row, {
            firstColumnTextAttr: {color: 'red'},
            hasBorder: true,
            contentHasMarkup: true,
            fit: true   // Activate all expand/shrink + wordWrap
        }
    );

}

/**
 * entry point of the program
 * @returns {Promise<void>}
 */
async function runProgram() {
    const content = await readPackageJson("./package.json");
    const dependencies = await getAllDependencies(content);
    const responses = await makeRequest(toSSIndexFormat(dependencies));

    const noVulnerability = responses.reduce((sum, response) => {
        return sum + response.vulnerabilities.length;
    }, 0);

    if (noVulnerability === 0){
        term.green.bold(`\n-> Congratulation! Program Found ${noVulnerability} vulnerabilities In total\n`);
        return;
    }

    term.bold.red(`\n-> Program Found ${noVulnerability} vulnerabilities In total\n`);
    if (noVulnerability !== 0) {
        responses.forEach(response => {
            if (response.vulnerabilities.length > 0) {
                term.bold.red(`\n-> Found ${response.vulnerabilities.length} vulnerabilities for ${response.coordinates}\n`);
                prettyPrint(response)
            }
        })
    }
}

term.bold.underline("Using https://ossindex.sonatype.org to check vulnerability...\n");
runProgram();