const {default: axios} = require("axios");
const {terminal: term} = require("terminal-kit");
const {getNameAndVersion, severityNumberToWord} = require("./common");
const {OSSURL} = require("./constants");


/**
 * coverts common package.json dep formats to ossindex vulnerability search format
 * i.e "axios": "^1.2.1" => pkg:npm/axios@1.2.1
 * @param listOfDependencies
 * @returns {*[]}
 */
exports.format = listOfDependencies => {
    const ossFormat = [];
    for (const dependency in listOfDependencies) {
        const {packageName, version} = getNameAndVersion(dependency, listOfDependencies[dependency]);
        ossFormat.push(`pkg:npm/${packageName}@${version}`);
    }
    return ossFormat;
};


/**
 * get response from ossindex.sonatype.org
 * @param listOfDependencies package.json dep in ossindex format
 * @returns {Promise<any>}
 */
exports.makeRequest = async listOfDependencies => {
    try {
        const remoteResponse = await axios.post(
            `${OSSURL}/api/v3/component-report`,
            {
                coordinates: listOfDependencies,
            }
        );
        return formatResponse(remoteResponse.data);
    } catch (error) {
        term.red(error.message);
    }
};

/**
 * convert oss response type to printable format
 * @param responseData
 * @returns {Promise<*[]>}
 */
const formatResponse = async responseData => {
    const result = [];
    for (const response of responseData) {
        if (response.vulnerabilities) {
            for (const vuln of response.vulnerabilities) {
                result.push({
                    "id": vuln.id,
                    "displayName": response.coordinates,
                    "description": vuln.description,
                    "cvssScore": severityNumberToWord(parseInt(vuln.cvssScore)),
                    "reference": vuln.reference
                });
            }
        }
    }
    return result;
}