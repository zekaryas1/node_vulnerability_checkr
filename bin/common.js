const {terminal: term} = require("terminal-kit");
const {readFile} = require("fs/promises");
const {resolve} = require("node:path");

/**
 * read content of a file on file system
 * @param pathToFile path to package.json
 * @returns {Promise<*>} content of json file
 */
exports.readPackageJson = async pathToFile => {
    try {
        const filePath = resolve(pathToFile);
        return await readFile(filePath, {encoding: "utf8"});
    } catch (err) {
        term.red(err.message);
        process.exit();
    }
};


/**
 * given a content of node.js package.json file
 * @param fileContent
 * @returns {Promise<void>} combined dependencies of dev and main packages
 */
exports.getAllDependencies = async fileContent => {
    const jsonFileContent = JSON.parse(fileContent);
    let combinedDep = {};

    if (jsonFileContent.dependencies) {
        combinedDep = jsonFileContent.dependencies;
    }
    if (jsonFileContent.devDependencies) {
        combinedDep = {...combinedDep, ...jsonFileContent.devDependencies};
    }
    return combinedDep;
};


/**
 * prints vulnerability response in table format
 * @param listOfVulnerabilities
 */
exports.prettyPrint = listOfVulnerabilities => {
    //Create a table
    const row = [[
        "Name",
        "Id",
        "Description",
        "Severity",
        "Detail link"
    ]];
    for (const vulnerability of listOfVulnerabilities) {
        row.push([
            vulnerability.displayName,
            vulnerability.id,
            vulnerability.description,
            vulnerability.cvssScore,
            vulnerability.reference
        ]);
    }

    term.table(row, {
            firstColumnTextAttr: {color: 'red'},
            hasBorder: true,
            contentHasMarkup: true,
            fit: true   // Activate all expand/shrink + wordWrap
        }
    );

}


exports.getNameAndVersion = (dependency, listOfDependencies) => {
    let packageName = dependency;
    let version = listOfDependencies[packageName];

    if (packageName.startsWith("@")) {
        packageName = packageName.slice(1, dependency.length);
    }
    if (version.startsWith("^")) {
        version = version.slice(1);
    }

    return {packageName, version};
}