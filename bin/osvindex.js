const {default: axios} = require("axios");
const {terminal: term} = require("terminal-kit");
const os = require("os");
const {getNameAndVersion} = require("./common");


/**
 * coverts common package.json dep formats to osvindex vulnerability search format
 * i.e "axios": "^1.2.1" to axios@1.2.1
 * @param listOfDependencies
 * @returns {*[]}
 */
exports.format = listOfDependencies => {
    const osvFormat = [];
    for (const dependency in listOfDependencies) {
        const {packageName, version} = getNameAndVersion(dependency, listOfDependencies);
        osvFormat.push({
            "package": {
                "ecosystem": "npm",
                "name": packageName
            },
            "version": version
        })
    }
    return osvFormat;
};


/**
 * get response from api.osv.dev
 * @param listOfDependencies package.json dep in osvindex format
 * @returns {Promise<any>}
 */
exports.makeRequest = async listOfDependencies => {
    try {
        const remoteResponse = await axios.post(
            "https://api.osv.dev/v1/querybatch",
            JSON.stringify({
                "queries": listOfDependencies
            })
        );
        return await formatResponse(remoteResponse.data.results);
    } catch (error) {
        term.red(error.message);
    }
};

const formatResponse = async responseData => {
    const result = [];
    for (const response of responseData) {
        if (response.vulns) {
            for (const vuln of response.vulns) {
                const {data} = await axios.get(`https://api.osv.dev/v1/vulns/${vuln.id}`);
                result.push({
                    "id": data.id,
                    "displayName": data.summary,
                    "description": data.details,
                    "cvssScore": data.database_specific ? data.database_specific.severity : "not found",
                    "reference": data.references.length > 0 ? data.references[0].url : "not found"
                });
            }
        }
    }
    return result;
}