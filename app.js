const express = require('express');
const exphbs = require('express-handlebars');
const fileUpload = require('express-fileupload');
const axios = require('axios').default;

const app = express();

app.engine('handlebars', exphbs());
app.set('view engine', 'handlebars');
app.use(express.static(__dirname + '/public'));
// enable files upload
app.use(fileUpload({
    createParentPath: true
}));

app.get('/', function (req, res) {
    res.render('home', {
        showIllustration: true
    });
});

app.post("/", async (req, res) => {
    if (!req.files) {
        res.render('home', {
            showIllustration: true,
            error: "submit json file"
        });
        return;
    }
    console.log(req.files.package.mimetype);
    if (req.files.package.mimetype !== "application/json") {
        res.render('home', {
            showIllustration: true,
            error: "only json is supported"
        });
        return;
    }

    let fileContent = req.files.package.data.toString('utf8');
    let jsonFileContent = JSON.parse(fileContent);
    if (jsonFileContent.dependencies) {
        let resultArray = toSimpleArray(jsonFileContent.dependencies);
        try {
            const remoteResponse = await axios.post("https://ossindex.sonatype.org/api/v3/component-report", {
                coordinates: resultArray
            });
            console.log(remoteResponse.data);
            res.render('home', {
                showIllustration: false,
                data: remoteResponse.data
            });
        } catch (error) {
            res.render('home', {
                showIllustration: false,
                error: "Check connection"
            });
        }

    }
});


function toSimpleArray(jsonObject) {
    let toReturn = [];
    for (obj in jsonObject) {
        var correct_version = jsonObject[obj].slice(1);
        toReturn.push(`pkg:npm/${obj}@${correct_version}`);
    }
    return toReturn;
}

const port = process.env.PORT || 3000;
app.listen(port, () => {
    console.log("server working on " + port);
});